// SIMPLE: pdfGenerator.js - Basic PDF generation
// Location: src/utils/pdfGenerator.js
// Action: CREATE NEW FILE

// For now, this generates a simple text download
// We can upgrade to actual PDF later with jsPDF

export function generatePDF(quote) {
  try {
    // Generate formatted text content
    const content = generateQuoteText(quote);
    
    // Create and download as text file (simple and works)
    const blob = new Blob([content], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `Quote_${quote.quoteNumber || 'Invoice'}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
    
    console.log('Quote downloaded successfully');
  } catch (error) {
    console.error('Error generating quote:', error);
    alert('Failed to download quote. Please try again.');
  }
}

function generateQuoteText(quote) {
  let text = '';
  
  // Header
  text += '═══════════════════════════════════════════════════════\n';
  text += '              UNICORN VALVES ESTIMATE\n';
  text += '         Estimate Management System\n';
  text += '═══════════════════════════════════════════════════════\n\n';
  
  // Quote Info
  text += `Quote Number:  ${quote.quoteNumber || 'N/A'}\n`;
  text += `Date:          ${quote.date || new Date().toLocaleDateString()}\n\n`;
  
  // Customer Info
  text += '───────────────────────────────────────────────────────\n';
  text += 'CUSTOMER DETAILS:\n';
  text += '───────────────────────────────────────────────────────\n';
  text += `Name:          ${quote.customerName || 'N/A'}\n`;
  text += `Email:         ${quote.customerEmail || 'N/A'}\n`;
  text += `Phone:         ${quote.customerPhone || 'N/A'}\n\n`;
  
  // Items
  text += '───────────────────────────────────────────────────────\n';
  text += 'QUOTE ITEMS:\n';
  text += '───────────────────────────────────────────────────────\n\n';
  
  if (quote.items && Array.isArray(quote.items)) {
    quote.items.forEach((item, index) => {
      text += `${index + 1}. ${item.moduleName || 'Module'}\n`;
      text += `   ${item.moduleDescription || ''}\n\n`;
      
      if (item.breakdown && Array.isArray(item.breakdown)) {
        item.breakdown.forEach(b => {
          const level = String(b.level || 'Item').padEnd(20);
          const name = String(b.name || 'N/A').padEnd(25);
          const price = `$${(b.price || 0).toLocaleString()}`.padStart(12);
          text += `   ${level} ${name} ${price}\n`;
        });
      }
      
      text += `\n   Module Subtotal:                      $${(item.moduleTotal || 0).toLocaleString()}\n`;
      text += '\n';
    });
  } else {
    text += '   No items in this quote\n\n';
  }
  
  // Grand Total
  text += '═══════════════════════════════════════════════════════\n';
  text += `GRAND TOTAL:                              $${(quote.total || 0).toLocaleString()}\n`;
  text += '═══════════════════════════════════════════════════════\n\n';
  
  // Footer
  text += 'Thank you for your business!\n';
  text += 'Generated by Unicorn Valves Estimate System\n';
  text += `Generated on: ${new Date().toLocaleString()}\n`;
  
  return text;
}

// If you want to upgrade to real PDF later, install jspdf:
// npm install jspdf jspdf-autotable
// Then uncomment the code below:

/*
import jsPDF from 'jspdf';
import 'jspdf-autotable';

export function generateRealPDF(quote) {
  const doc = new jsPDF();
  
  // Add header
  doc.setFillColor(79, 70, 229);
  doc.rect(0, 0, 220, 40, 'F');
  
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(24);
  doc.text('UNICORN VALVES', 20, 20);
  
  doc.setFontSize(12);
  doc.text('Estimate Management System', 20, 30);
  
  // Quote info
  doc.setTextColor(0, 0, 0);
  doc.setFontSize(10);
  doc.text(`Quote #: ${quote.quoteNumber}`, 20, 55);
  doc.text(`Date: ${quote.date}`, 20, 62);
  
  // Customer info
  doc.text('CUSTOMER:', 120, 55);
  doc.text(quote.customerName || '', 120, 62);
  doc.text(quote.customerEmail || '', 120, 69);
  
  // Items table
  const tableData = [];
  if (quote.items) {
    quote.items.forEach(item => {
      if (item.breakdown) {
        item.breakdown.forEach(b => {
          tableData.push([b.level, b.name, `$${b.price.toLocaleString()}`]);
        });
      }
      tableData.push(['', 'Module Total', `$${item.moduleTotal.toLocaleString()}`]);
    });
  }
  
  doc.autoTable({
    startY: 80,
    head: [['Level', 'Selection', 'Price']],
    body: tableData,
  });
  
  // Total
  const finalY = doc.lastAutoTable.finalY + 10;
  doc.setFontSize(14);
  doc.text(`GRAND TOTAL: $${quote.total.toLocaleString()}`, 20, finalY);
  
  // Save
  doc.save(`Quote_${quote.quoteNumber}.pdf`);
}
*/